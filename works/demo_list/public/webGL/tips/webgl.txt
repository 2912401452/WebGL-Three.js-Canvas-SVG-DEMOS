var gl = getWebGLContext( canvas )
gl : webGL 绘图上下文

gl.drawingBufferWidth   颜色缓冲区宽度

gl.drawingBufferHeight 颜色缓冲区高度

gl.clearColor( red, green, blue, alpha ) 指定绘图区域的背景色
    red/green/blue/alpha - rgba ( 0 - 1 )
    若有参数值小于 0.0 或是大于 1.0 ,那么就会分别被截断为 0.0 或 1.0

    当指定一次背景色之后，背景色会保留在 webGL 系统中直到下一次调用 gl.clearColor 前不改变

gl.clear( buffer ) 将缓冲区设定为预定的值
    buffer 指定带清空的缓冲区，可用位操作符RO(|)同时指定多个缓冲区 (可能的值)：
        gl.COLOR_BUFFER_BIT     颜色缓冲区
        gl.DEPTH_BUFFER_BIT     深度缓冲区
        gl.STENCLI_BUFFER_BIT   模板缓冲区
    
    在没有指定背景色或是其他的指定参数的情况下调用 clear 函数会使用默认值
        COLOR_BUFFER_BIT    ( 0.0, 0.0, 0.0, 0.0 )  gl.clearColor( r, g, b, a )
        DEPTH_BUFFER_BIT    1.0                     gl.clearDepth( depth )
        STENCLI_BUFFER_BIT  0.0                     gl.clearStencil( s )

gl.drawArrays( mode, first, count ) 上下文根据一系列的顶点以及指定的绘制方式绘制图形
    mode    绘制方式：gl.POINTS, gl.LINES, gl.LINE_LOOP, gl.TRIANGLES...
    first   指定从那个顶点开始绘制( 整型数 )
    count   指定绘制需要多少顶点数( 整型数 )

    当程序执行 gl.drawArrays 的时候，顶点着色器将被执行 count 次，每次处理一个顶点
    在顶点着色器的执行结束之后( 顶点部分的处理全部结束 )，才会执行片元着色器

gl.getAttribLocation( program, name ) 获取由 name 参数指定的 attribute 变量的存储地址
    program     指定包含顶点着色器和片元着色器的程序对象
    name        指定想要获取的 attribute 变量地址的名称

    return      大于等于零( 地址 ) / -1 ( 指定 attribute 变量不存在 )

gl.vertexAttrib3f( location, v0, v1, v2 ) 将数据 ( v0, v1, v2 ) 传给由 location 参数指定的 attribute 变量
    location    将要修改的 attribute 变量的存储地址
    v0/v1/v2    分量的值
    同族函数：
        gl.vertexAttrib1f( location, v0 )
        gl.vertexAttrib2f( location, v0, v1 )
        gl.vertexAttrib4f( location, v0, v1, v2, v3 )

gl.getUniformLocation( program, name ) 获取由 name 参数指定的 uniform 变量的存储地址
gl.uniform4f( location, v0, v1, v2, v3 ) 将数据 ( v0, v1, v2, v3 ) 传给由 location 参数指定的 uniform 变量

gl.createBuffer() 创建一个新的缓冲区对象
    return      buffer

gl.deleteBuffer( buffer ) 删除参数 buffer 表示的缓冲区对象

gl.bindBuffer( target, buffer ) 允许使用 buffer 表示的缓冲区对象并将其绑定到 target 上
    target 参数的可能值如下：
        gl.ARRAY_BUFFER     表示缓冲区对象中包含了顶点的数据
        gl.ELEMENT_ARRAY_BUFFER         表示缓冲区对象中包含了顶点的索引值
    buffer                  待绑定的缓冲区对象

gl.bufferData( target, data, usage ) 开辟存储空间，向绑定在 target 上的缓冲区对象中写入数据
    target      gl.ARRAY_BUFFER/gl.ELEMENT_ARRAY_BUFFER 
    data        类型化数组数据
    usage       表示该如何使用缓冲区中的数据
                    gl.STATIC_DRAW
                    gl.STREAM_DRAW
                    gl.DYNAMIC_DRAW

gl.vertexAttribPointer( location, size, type, normalized, stride, offset )
    将绑定 target 的缓冲区对象分配给由 location 指定的 attribute 变量
    location        指定的待分配的 attribute 变量的存储位置
    size            指定缓冲区中的每个顶点的分量个数，缺失的分量按默认规则补全
    type            指定数据格式
                        gl.UNSIGNED_BYTE, gl.SHORT, gl.UBSIGNED_SHORT, gl.INT, gl.UNSIGNED_INT, gl.FLOAT
    normalized      boolean,表示是否将非浮点型的数据归一化到[0,1]或[-1,0]之间
    stride          指定相邻两个顶点之间的字节数, 默认为 0
    offset          指定缓冲区对象中的偏移量，即 attribute 变量从何处开始取值

gl.enableVertexAttribArray( location ) 开启 location 指定的 attribute 变量